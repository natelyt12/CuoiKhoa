import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from itertools import islice

# M·∫•y c√°i x√†m x√≠
from module.data_handler import load_data
from PIL import Image

st.set_page_config(
    page_title="03 CSA TEAM",
    page_icon="logo.png",  
)

# st.title("TEAM NET PY")

# Load & x·ª≠ l√Ω d·ªØ li·ªáu -----------------------------------------------------------------------
df = load_data()
df_noMNN = df.drop(columns=['M√£ ngo·∫°i ng·ªØ'])
df_clean = df_noMNN.drop(columns=['SBD'])
mon_thi = ['To√°n', 'V·∫≠t L√≠', 'H√≥a h·ªçc', 'Sinh h·ªçc', 'L·ªãch s·ª≠', 'ƒê·ªãa l√≠', 'GDCD', 'Ngo·∫°i ng·ªØ', 'NguÃõÃÉ vaÃÜn']

# Sidebar + title
st.sidebar.title('Gi·ªõi thi·ªáu')

# logo team
logo = Image.open("logo.png")
st.sidebar.image(logo, caption="03 CSA Team", use_container_width=True)

st.sidebar.write(
    '·ª®ng d·ª•ng n√†y gi√∫p b·∫°n tra c·ª©u ƒëi·ªÉm thi THPT Qu·ªëc Gia 2024.\n'
    '·ª®ng d·ª•ng ƒë∆∞·ª£c vi·∫øt nh·∫±m m·ª•c ƒë√≠ch chu·∫©n b·ªã cu·ªëi kh√≥a CSA c·ªßa MindX.\n\n'
    'Th√†nh vi√™n nh√≥m:\n- Nguy·ªÖn Nh∆∞ H·∫£i ƒêƒÉng\n- L√£ Ph√∫c Thanh\n- L√™ Trung Ki√™n'
)
st.title('THPT Qu·ªëc Gia 2024')

# Ph·∫ßn ch√≠nh -----------------------------------------------------------------------------------------------
table_of_contents = st.tabs(["T·ªïng quan", "ƒêi·ªÉm trung b√¨nh", "Th√¥ng tin chi ti·∫øt c·ªßa t·ª´ng m√¥n h·ªçc", "T·ªï h·ª£p"])
with table_of_contents[0]: # T·ªïng quan
    st.write('T·ªïng quan d·ªØ li·ªáu:')
    st.write(df.head(10))

    # C√°c m√¥n t·ª´ng t·ªï h·ª£p
    khtn = ["V·∫≠t L√≠", "H√≥a h·ªçc", "Sinh h·ªçc"]
    khxh = ["L·ªãch s·ª≠", "ƒê·ªãa l√≠", "GDCD"]
    # Ki·ªÉm tra t·ª´ng th√≠ sinh c√≥ thi √≠t nh·∫•t 1 m√¥n c·ªßa t·ª´ng t·ªï h·ª£p hay kh√¥ng
    df_KH = df_clean.copy()
    df_KH['thi_KHTN'] = df_KH[khtn].notnull().any(axis=1)
    df_KH['thi_KHXH'] = df_KH[khxh].notnull().any(axis=1)
    # ƒê·∫øm s·ªë h·ªçc sinh thi t·ª´ng t·ªï h·ª£p
    so_luong_khtn = df_KH['thi_KHTN'].sum()
    so_luong_khxh = df_KH['thi_KHXH'].sum()

    # Card to ƒë·∫ßu ti√™n
    st.markdown(f"""
    <div style='background-color: transparent; padding: 30px; text-align: center; margin-bottom: 30px;'>
        <div style='font-size: 20px; color: white;'>S·ªë th√≠ sinh thi THPTQG 2024</div>
        <div style='font-size: 60px; color: white;'>{df_clean.shape[0]:,}</div>
    </div>
    """, unsafe_allow_html=True)

    # Card nh·ªè (danh s√°ch key-value)
    cards = {
        "S·ªë m√¥n thi": df_clean.shape[1],
        "S·ªë h·ªçc sinh thi KHTN": so_luong_khtn,
        "S·ªë h·ªçc sinh thi KHXH": so_luong_khxh,
        "S·ªë h·ªçc sinh thi ngo·∫°i ng·ªØ N1": df['M√£ ngo·∫°i ng·ªØ'].notnull().sum(),
        "S·ªë b√†i thi b·ªã ƒëi·ªÉm li·ªát": (df_clean[mon_thi] <= 1.0).sum().sum(),
        "S·ªë b√†i thi 0 ƒëi·ªÉm": (df_clean[mon_thi] == 0.0).sum().sum()
    }

    def chunk_dict(d, n):
        it = iter(d.items())
        for _ in range(0, len(d), n):
            yield dict(islice(it, n))

    # Hi·ªÉn th·ªã theo d·∫°ng l∆∞·ªõi
    for row in chunk_dict(cards, 3):  # 3 card m·ªói d√≤ng
        cols = st.columns(3)
        for col, (title, value) in zip(cols, row.items()):
            with col:
                st.markdown(f"""
                <div style='background-color: transparent; padding: 20px; border-radius: 12px;
                        margin-bottom: 20px; text-align: center;'>
                    <div style='font-size: 14px; color: white;'>{title}</div>
                    <div style='font-size: 30px; color: white;'>{value}</div>
                </div>
                """, unsafe_allow_html=True)

with table_of_contents[1]: # ƒêi·ªÉm trung binh
    average_scores = df_clean.mean().round(2)
    # T√¨m SBD
    with st.expander("üîç T√¨m s·ªë b√°o danh", expanded=False):
        sbd_input = st.text_input("Nh·∫≠p SBD c·∫ßn t√¨m (v√≠ d·ª•: 1000010):")

        if sbd_input:
            result = df[df["SBD"].astype(str) == sbd_input.strip()]
            if not result.empty:
                st.success(f"T√¨m th·∫•y {len(result)} k·∫øt qu·∫£:")
                st.dataframe(result, use_container_width=True)
                if result['H√≥a h·ªçc'].sum() == 0:
                    st.write('Th√≠ sinh n√†y thi khoa h·ªçc x√£ h·ªôi')
                else:
                    st.write('Th√≠ sinh n√†y thi KHTN')
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y th√≠ sinh v·ªõi SBD n√†y.")

    # Trung b√¨nh
    st.subheader('Trung b√¨nh ƒëi·ªÉm thi c√°c m√¥n')
    average_scores = average_scores.rename('ƒêi·ªÉm trung b√¨nh')
    st.dataframe(average_scores, use_container_width=True)
    
    fig = px.bar(
        average_scores,
        x=average_scores.index,
        y=average_scores.values,
        labels={'index': 'M√¥n thi', 'y': 'ƒêi·ªÉm trung b√¨nh'},
        title='Bi·ªÉu ƒë·ªì ƒëi·ªÉm trung b√¨nh c√°c m√¥n thi',
        color_discrete_sequence=["#FFAEE0"],
        text_auto=True
    )
    fig.update_layout(
        bargap=0.2,
        xaxis_title="M√¥n thi",
        yaxis_title="ƒêi·ªÉm trung b√¨nh",
    )

    # Th√™m bi·ªÉu ƒë·ªì ƒë∆∞·ªùng
    fig.add_trace(go.Scatter(
        x=average_scores.index,
        y=average_scores,  # D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì ƒë∆∞·ªùng
        mode='lines',
        line_color="#FF8A86",
        line_width=2,
        name='ƒê·ªô d·ªëc'
    ))

    st.plotly_chart(fig, use_container_width=True)

    
    # M√¥n c√≥ ƒëi·ªÉm trung b√¨nh cao nh·∫•t
    max_avg_score = average_scores.idxmax()
    st.markdown(f"M√¥n c√≥ ƒëi·ªÉm trung b√¨nh cao nh·∫•t l√† **{max_avg_score}** v·ªõi ƒëi·ªÉm trung b√¨nh **{average_scores[max_avg_score]}**")
    # M√¥n c√≥ ƒëi·ªÉm trung b√¨nh th·∫•p nh·∫•t
    min_avg_score = average_scores.idxmin()
    st.markdown(f"M√¥n c√≥ ƒëi·ªÉm trung b√¨nh th·∫•p nh·∫•t l√† **{min_avg_score}** v·ªõi ƒëi·ªÉm trung b√¨nh **{average_scores[min_avg_score]}**")
    

    st.subheader("ƒêi·ªÉm trung b√¨nh c·ªßa c√°c m√¥n t·ª± nhi√™n v√† c√°c m√¥n x√£ h·ªôi")
    st.markdown(f'*S·ªë l∆∞·ª£ng h·ªçc sinh tham gia thi KHTN v√† KHXH:*')
    fig = go.Figure(
        go.Pie(
            labels=["KHTN", "KHXH"],
            values=[so_luong_khtn, so_luong_khxh],
            textinfo="label+percent",
            textposition="inside",
            marker=dict(colors=["#FFAEE0", "#FF8A86"]),
        )    
    )
    fig.update_layout(
        showlegend=False,
        margin=dict(l=0, r=0, t=0, b=0)
    )

    st.plotly_chart(fig, use_container_width=True)

    # ƒêi·ªÉm trung b√¨nh c·ªßa c√°c m√¥n KHTN
    tb_tu_nhiien = (average_scores['To√°n'] + average_scores['V·∫≠t L√≠'] + average_scores['H√≥a h·ªçc'] + average_scores['Sinh h·ªçc']) / 4
    st.markdown(f'ƒêi·ªÉm trung b√¨nh c√°c m√¥n KHTN: *{tb_tu_nhiien:.2f}*')
    # ƒêi·ªÉm trung b√¨nh c·ªßa c√°c m√¥n KHXH
    tb_xa_hoi = (average_scores['NguÃõÃÉ vaÃÜn'] + average_scores['L·ªãch s·ª≠'] + average_scores['ƒê·ªãa l√≠'] + average_scores['GDCD']) / 4
    st.markdown(f'ƒêi·ªÉm trung b√¨nh c√°c m√¥n KHXH: *{tb_xa_hoi:.2f}*')

    if tb_xa_hoi > tb_tu_nhiien:
        st.info("Kh·ªëi x√£ h·ªôi nƒÉm 2024 c√≥ ƒëi·ªÉm trung b√¨nh cao h∆°n kh·ªëi t·ª± nhi√™n.")
    else:
        st.info("Kh·ªëi t·ª± nhi√™n nƒÉm 2024 c√≥ ƒëi·ªÉm trung b√¨nh nh·ªânh h∆°n kh·ªëi x√£ h·ªôi.")

with table_of_contents[2]: # Ph·ªï ƒëi·ªÉm v√† th√¥ng tin kh√°c
    # Ph·ªï ƒëi·ªÉm t·ª´ng m√¥n
    chon_mon = st.selectbox("Ch·ªçn m√¥n h·ªçc ƒë·ªÉ b·∫Øt ƒë·∫ßu xem th√¥ng tin chi ti·∫øt:", mon_thi)

    if chon_mon:
        st.info(f"Th√¥ng tin chi ti·∫øt v·ªÅ m√¥n {chon_mon}:")
        # Bi·ªÉu ƒë·ªì tr√≤n bi·ªÉu di·ªÖn ph·∫ßn trƒÉm th√≠ sinh tham gia thi m√¥n so v·ªõi t·ªïng th√≠ sinh
        fig = go.Figure(data=[go.Pie(
            labels=[f'Th√≠ sinh tham gia thi {chon_mon}', f'Th√≠ sinh kh√¥ng tham gia thi {chon_mon}'],
            values=[df_clean[chon_mon].notnull().sum(), df_clean[chon_mon].isnull().sum()],
            textinfo='percent+label',
            textposition='inside',
            insidetextorientation='radial',
            marker=dict(colors=['#AEF3FF', '#FFAEAE']),
        )])
        fig.update_layout(
            showlegend=False,
            margin=dict(l=0, r=0, t=0, b=0),
        )
        st.plotly_chart(fig, use_container_width=True)


        # Card to ƒë·∫ßu ti√™n
        st.markdown(f"""
        <div style='background-color: transparent; padding: 30px; text-align: center; margin-bottom: 30px;'>
            <div style='font-size: 20px; color: white;'>S·ªë b√†i thi m√¥n {chon_mon}</div>
            <div style='font-size: 60px; color: white;'>{df_clean[chon_mon].notnull().sum()}</div>
        </div>
        """, unsafe_allow_html=True)

        cards = {
            "ƒêi·ªÉm trung b√¨nh": average_scores[chon_mon],
            "S·ªë b√†i thi ƒë·∫°t 10 tuy·ªát ƒë·ªëi": (df[chon_mon] == 10.0).sum(),
            "S·ªë b√†i thi ƒë∆∞·ª£c 8 ƒëi·ªÉm tr·ªü l√™n": (df[chon_mon] >= 8.0).sum(),
            "S·ªë b√†i thi b·ªã ƒëi·ªÉm li·ªát": (df[chon_mon] <= 1.0).sum(),
            "S·ªë b√†i thi 0 ƒëi·ªÉm": (df[chon_mon] == 0.0).sum(),
            "Trung v·ªã": df[chon_mon].median(),
        }

        def chunk_dict(d, n):
            it = iter(d.items())
            for _ in range(0, len(d), n):
                yield dict(islice(it, n))

        # Hi·ªÉn th·ªã theo d·∫°ng l∆∞·ªõi
        for row in chunk_dict(cards, 3):  # 3 card m·ªói d√≤ng
            cols = st.columns(3)
            for col, (title, value) in zip(cols, row.items()):
                with col:
                    st.markdown(f"""
                    <div style='background-color: transparent; padding: 20px; border-radius: 12px;
                            margin-bottom: 20px; text-align: center;'>
                        <div style='font-size: 14px; color: white;'>{title}</div>
                        <div style='font-size: 30px; color: white;'>{value}</div>
                    </div>
                    """, unsafe_allow_html=True)

        mon_data = df_clean[df_clean[chon_mon] > 0][chon_mon]
        st.header(f"Ph√¢n b·ªë ƒëi·ªÉm m√¥n {chon_mon}")
        fig = px.histogram(
            mon_data,
            x=chon_mon,
            nbins=30,
            color_discrete_sequence=["#7BCAFF"],
            text_auto=True
        )
        fig.update_layout(
            bargap=0.05,
            xaxis_title="ƒêi·ªÉm",
            yaxis_title="S·ªë l∆∞·ª£ng th√≠ sinh",
        )
        st.plotly_chart(fig, use_container_width=True, key=f"fig_{chon_mon}")

with table_of_contents[3]: # Th·ªëng k√™ theo t·ªï h·ª£p m√¥n
    st.subheader("Ph√¢n t√≠ch theo t·ªï h·ª£p m√¥n")
    tohop_dict = {
        "A00": ["To√°n", "V·∫≠t L√≠", "H√≥a h·ªçc"],
        "A01": ["To√°n", "V·∫≠t L√≠", "Ngo·∫°i ng·ªØ"],
        "B00": ["To√°n", "Sinh h·ªçc", "H√≥a h·ªçc"],
        "C00": ["NguÃõÃÉ vaÃÜn", "L·ªãch s·ª≠", "ƒê·ªãa l√≠"],
        "D01": ["NguÃõÃÉ vaÃÜn", "To√°n", "Ngo·∫°i ng·ªØ"],
        "D02": ["NguÃõÃÉ vaÃÜn", "To√°n", "L·ªãch s·ª≠"],
        "D03": ["NguÃõÃÉ vaÃÜn", "To√°n", "Sinh h·ªçc"],
        "D04": ["NguÃõÃÉ vaÃÜn", "To√°n", "ƒê·ªãa l√≠"],
        "D05": ["NguÃõÃÉ vaÃÜn", "To√°n", "GDCD"]
    }
    chon = st.selectbox("Ch·ªçn t·ªï h·ª£p m√¥n:", list(tohop_dict.keys()))
    if chon:
        subjects = tohop_dict[chon]
        filtered_df = df.copy()
        for subj in subjects:
            filtered_df = filtered_df[filtered_df[subj] >= 0]
        st.success(f"C√≥ t·∫•t c·∫£ {len(filtered_df)} h·ªçc sinh ch·ªçn thi t·ªï h·ª£p {chon} ({', '.join(subjects)}) - chi·∫øm {round(len(filtered_df) / df.shape[0] * 100, 2)}% t·ªïng th√≠ sinh")
        
        # T√≠nh t·ªïng ƒëi·ªÉm t·ªï h·ª£p
        filtered_df["T·ªïng ƒëi·ªÉm"] = filtered_df[subjects].sum(axis=1)

        # V·∫Ω bi·ªÉu ƒë·ªì ph·ªï ƒëi·ªÉm
        st.markdown("### Bi·ªÉu ƒë·ªì ph·ªï ƒëi·ªÉm t·ªï h·ª£p")
        fig = px.histogram(filtered_df, x="T·ªïng ƒëi·ªÉm", nbins=60,
                           title=f"Ph√¢n b·ªë t·ªïng ƒëi·ªÉm t·ªï h·ª£p {chon}", color_discrete_sequence=['#FF6F61'])
        fig.update_layout(xaxis_title="ƒêi·ªÉm", yaxis_title="S·ªë l∆∞·ª£ng h·ªçc sinh", bargap=0.05)
        st.plotly_chart(fig, use_container_width=True)

        st.markdown(f"""
        <div style='background-color: transparent; padding: 30px; text-align: center; margin-bottom: 30px;'>
            <div style='font-size: 20px; color: white;'>ƒêi·ªÉm trung b√¨nh c·ªßa t·ªï h·ª£p {chon}</div>
            <div style='font-size: 60px; color: white;'>{filtered_df["T·ªïng ƒëi·ªÉm"].mean().round(2)}</div>
        </div>
        """, unsafe_allow_html=True)

        cards = {
            "ƒêi·ªÉm t·ªï h·ª£p cao nh·∫•t": filtered_df["T·ªïng ƒëi·ªÉm"].max(),
            "ƒêi·ªÉm nhi·ªÅu th√≠ sinh ƒë·∫°t nh·∫•t": filtered_df["T·ªïng ƒëi·ªÉm"].mode().values[0],
            "Trung v·ªã": filtered_df["T·ªïng ƒëi·ªÉm"].median()
        }

        def chunk_dict(d, n):
            it = iter(d.items())
            for _ in range(0, len(d), n):
                yield dict(islice(it, n))

        # Hi·ªÉn th·ªã theo d·∫°ng l∆∞·ªõi
        for row in chunk_dict(cards, 3):  # 3 card m·ªói d√≤ng
            cols = st.columns(3)
            for col, (title, value) in zip(cols, row.items()):
                with col:
                    st.markdown(f"""
                    <div style='background-color: transparent; padding: 20px; border-radius: 12px;
                            margin-bottom: 20px; text-align: center;'>
                        <div style='font-size: 14px; color: white;'>{title}</div>
                        <div style='font-size: 30px; color: white;'>{value}</div>
                    </div>
                    """, unsafe_allow_html=True)

        st.subheader(f"Top 10 th√≠ sinh c√≥ t·ªïng ƒëi·ªÉm cao nh·∫•t theo t·ªï h·ª£p {chon}, ({', '.join(subjects)})")
        # X√≥a b·ªè NaN
        filtered_df = filtered_df.dropna(subset=["T·ªïng ƒëi·ªÉm"])
        st.dataframe(filtered_df.sort_values("T·ªïng ƒëi·ªÉm", ascending=False).head(10))